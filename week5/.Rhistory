}
####################################################################################
# ITERATE OVER SUSCEPTIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Run the first iteration outside the loop to capture the structure of model_data
model_data_first_run <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, transmissibility_values[1], infection_delays, interval)
# Initialize all_data with the first run's results
all_data <- model_data_first_run
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values[-1]) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
all_data <- rbind(all_data, model_data)
}
# Plot all curves on the same figure
#plot_object <- ggplot(data = all_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) +
#  geom_line() +
#  ylab("Fraction infected")
#print(plot_object)
# Save the plot to a PDF file
#ggsave("output.pdf", plot = plot_object, width = 7, height = 5)
####################################################################################
# ITERATE OVER SUSCEPTIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Run the first iteration outside the loop to capture the structure of model_data
model_data_first_run <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, transmissibility_values[1], infection_delays, interval)
# Initialize all_data with the first run's results
all_data <- model_data_first_run
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values[-1]) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
all_data <- rbind(all_data, model_data)
}
# Plot all curves on the same figure
plot_object <- ggplot(data = all_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected")
print(plot_object)
library(fluEvidenceSynthesis)
library(pander)
library(ggplot2)
library(dplyr)
library(tidyr)
library(epiparameter)
data(polymod_uk)
data(demography)
run_model_vignette <- function(population, initial.infected, vaccine_calendar, contacts,
susceptibility, transmissibility, infection_delays, interval) {
# Run model and store results
odes <- infectionODEs( population, initial.infected, vaccine_calendar, contacts,
susceptibility, transmissibility, infection_delays, interval)
# Compute fraction of each subpopulation that is infective at any point in time
fraction.infected <- odes %>%
gather(Group, Incidence, -Time) %>%
mutate(fraction = Incidence/population[Group])
return(fraction.infected)
}
####################################################################################
# POPULATION DATA
####################################################################################
# Separate into non elderly (<65) and elderly population
ag <- stratify_by_age(demography, limits=c(65)) # c( 43670500, 8262600 )
# Separate in risk groups. In this case we assume one additional (high) risk groups and that respectively
# 1 percent of non elderly and 40% of elderly are in this risk group. It is possible to
# define an additional risk group (e.g. pregnant women) if desired
population <- stratify_by_risk(ag, matrix(c(0.01,0.4),nrow=1),
labels = c("LowRisk", "HighRisk")) # c( 43233795, 4957560, 436705, 3305040 )
####################################################################################
# INTEGRATION dt
####################################################################################
interval <- 7
####################################################################################
# INITIAL INFECTED
####################################################################################
ag <- c(1000,1000)
initial.infected <- stratify_by_risk( ag, matrix(c(0.01,0.4),nrow=1)) # c(990, 600, 10, 400)
####################################################################################
# VACCINE CALENDAR
####################################################################################
vaccine_calendar <- as_vaccination_calendar(
efficacy = c(0.7,0.4),
coverage = as.data.frame(matrix(c(0,0,0,0,0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861), nrow = 6, byrow = T)),
dates = c(as.Date("2023-10-01"), as.Date("2023-11-01"), as.Date("2023-12-01"), as.Date("2024-01-01"), as.Date("2014-02-01"), as.Date("2024-03-01")), # begin and end date
no_age_groups = 2,
no_risk_groups = 2
)
####################################################################################
# CONTACT RATES BETWEEN AGE GROUPS
####################################################################################
# Polymod data is subdivided in seven age groups
poly <- polymod_uk[,c(1,2,3,9)]
poly[,3] <- rowSums(polymod_uk[,3:8])
contacts <- contact_matrix(as.matrix(poly), demography, c(65))
pander(contacts)
####################################################################################
# EPIDEMIOLOGICAL PARAMETERS
####################################################################################
susceptibility <- c(0.7, 0.3) # Different for different ages
transmissibility <- 0.14 # Same for all ages
infection_delays <- c( 0.8, 2.5 ) # 0.8 and 1.8 day.
####################################################################################
# ITERATE OVER SUSCEPTIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Run the first iteration outside the loop to capture the structure of model_data
model_data_first_run <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, transmissibility_values[1], infection_delays, interval)
# Initialize all_data with the first run's results
all_data <- model_data_first_run
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values[-1]) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
all_data <- rbind(all_data, model_data)
}
# Plot all curves on the same figure
plot_object <- ggplot(data = all_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected")
print(plot_object)
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
ggplot(data=model_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected")) + ggtitle(paste("Susceptibility =", susceptibility))
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
ggplot(data=model_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility)) + geom_line() + ylab("Fraction infected")) + ggtitle(paste("Susceptibility =", susceptibility))
}
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
ggplot(data=model_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected") + ggtitle(paste("Susceptibility =", susceptibility))
}
# Plot all curves on the same figure
#plot_object <- ggplot(data = all_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected")
#print(plot_object)
# Save the plot to a PDF file
#ggsave("output.pdf", plot = plot_object, width = 7, height = 5)
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
plot <- ggplot(data=model_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected") + ggtitle(paste("Susceptibility =", susceptibility))
print(plot)
}
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
plot <- ggplot(data=model_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected") + ggtitle(paste("Susceptibility =", susceptibility))
#print(plot)
}
# Plot all curves on the same figure
#plot_object <- ggplot(data = all_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected")
#print(plot_object)
# Save the plot to a PDF file
#ggsave("output.pdf", plot = plot_object, width = 7, height = 5)
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
plot <- ggplot(data=model_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected") + ggtitle(paste("Susceptibility =", susceptibility))
print(plot)
}
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
ggplot(model_data) + geom_line( aes(x=Time, y=fraction, colour = Group) ) +
ylab( "Fraction infected")
print(plot)
}
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
ggplot(model_data) + geom_line( aes(x=Time, y=fraction, colour = Group) ) +
ylab( "Fraction infected")
}
# Plot all curves on the same figure
#plot_object <- ggplot(data = all_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected")
#print(plot_object)
# Save the plot to a PDF file
#ggsave("output.pdf", plot = plot_object, width = 7, height = 5)
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
plot <- ggplot(model_data) + geom_line( aes(x=Time, y=fraction, colour = Group) ) +
ylab( "Fraction infected")
print(plot)
}
# Plot all curves on the same figure
#plot_object <- ggplot(data = all_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected")
#print(plot_object)
# Save the plot to a PDF file
#ggsave("output.pdf", plot = plot_object, width = 7, height = 5)
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
plot <- ggplot(model_data) + geom_line( aes(x=Time, y=fraction, colour = Group) ) +
ylab( "Fraction infected") + ggtitle(past('Transmissibility = ', t))
print(plot)
}
####################################################################################
# ITERATE OVER TRANSMISSIBILITY VALUES
####################################################################################
# Define a range of transmissibility values to iterate over
transmissibility_values <- seq(0.10, 0.18, by = 0.02)
# Now loop over the remaining transmissibility values starting from the second one
for(t in transmissibility_values) {  # Exclude the first element since it's already processed
model_data <- run_model_vignette(population, initial.infected, vaccine_calendar, contacts,
susceptibility, t, infection_delays, interval)
plot <- ggplot(model_data) + geom_line( aes(x=Time, y=fraction, colour = Group) ) +
ylab( "Fraction infected") + ggtitle(paste('Transmissibility = ', t))
print(plot)
}
# Plot all curves on the same figure
#plot_object <- ggplot(data = all_data, aes(x = Time, y = fraction, colour = Group, linetype = factor(Transmissibility))) + geom_line() + ylab("Fraction infected")
#print(plot_object)
# Save the plot to a PDF file
#ggsave("output.pdf", plot = plot_object, width = 7, height = 5)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
as.data.frame(matrix(c(0,0,0,0,0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861), nrow = 6, byrow = T))
type(as.data.frame(matrix(c(0,0,0,0,0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861), nrow = 6, byrow = T)))
typeof(as.data.frame(matrix(c(0,0,0,0,0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861, 0,0.861,0.123,0.861), nrow = 6, byrow = T)))
rbind(c(0, 0, 0, 0,),
c(0, 0.861, 0.123, 0.861),
c(0, 0.861, 0.123, 0.861),
c(0, 0.861, 0.123, 0.861),
c(0, 0.861, 0.123, 0.861),
c(0, 0.861, 0.123, 0.861))
rbind(c(0, 0, 0, 0),
c(0, 0.861, 0.123, 0.861),
c(0, 0.861, 0.123, 0.861),
c(0, 0.861, 0.123, 0.861),
c(0, 0.861, 0.123, 0.861),
c(0, 0.861, 0.123, 0.861))
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
?as_vaccination_calendar
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
?public_health_outcome
demography
population
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
poymod_uk
data(polymod_uk)
force(polymod_uk)
View(polymod_uk)
?contact_matrix
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
poly
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
demography
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
contacts
library(socialmixr)
?contact_matrix
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
contacts
1e-7
1e-7+1
1e-2+1
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
initial.infected
typeof(initial.infected)
typeof(c(20.0))
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
?stratify_by_risk
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
?stratify_by_age
demography
stratify_by_age(demography, c())
stratify_by_age(demography, c(0))
stratify_by_age(demography, c(100))
typeof(stratify_by_age(demography, c(100)))
sum(demography)
c(sum(demography))
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
initial.infected
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
initial.infected
typeof(initial.infected)
population
typeof(population)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
?infectionODEs
population
population <- c(sum(demography))
population
initialinitial.infected <- c(10 ^ 1.5)
initial.infected <- c(10 ^ 1.5)
initial.infected
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
View(run_model_vignette)
typeof(population)
typeof(initial.infected)
typeof(vaccine_calendar)
typeof(contacts)
typeof(susceptibility)
typeof(t)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
for(t in transmissibility_values) {typeof(t)}
for(t in transmissibility_values) {print(typeof(t))}
typeof(infection_delays)
typeof(infection_delayinterval)
typeof(interval)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
typeof(transmissibility)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
View(model_data)
View(model_data)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
model_data
View(model_data)
View(model_data)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
View(model_data)
View(model_data)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
View(model_data)
typeof(odes)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
typeof(odes)
View(odes)
View(odes)
population
View(odes)
odes$V1
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
View(polymod_uk)
View(polymod_uk)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/simple-models.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
inference_results$batch
inference_results
str(inference_results)
inference_results$batch
str(inference_results$batch)
install.packages("tidyverse")
F
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
batch_tibble
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
View(viro)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
?vaccination_scenario
getwd()
getwd()
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
contacts
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
population
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
polymod
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
?epiparameter
??epiparameter
?infectionODEs
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
load("inference-data-results.RData")
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/modelling-experiments.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
?as_vaccination_calendar
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
source("~/repos/r-experiments/week5/proper-inference.R", echo=TRUE)
?infectionODEs
ili
