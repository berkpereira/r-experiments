x = mean(c(close_schools$time_begin, close_schools$time_end)),
y = 50000,
label = "Schools closed"
) +
annotate(
geom = "text",
x = mean(c(
close_workplaces$time_begin,
close_workplaces$time_end
)),
y = 30000,
colour = "red",
label = "Workplaces\nclosed"
) +
geom_line(
data = data_baseline_infections,
aes(time, new_infections, colour = demography_group),
linetype = "dashed"
) +
geom_line(
data = data_infections,
aes(time, new_infections, colour = demography_group),
linetype = "solid"
) +
scale_y_sqrt(
labels = scales::comma,
breaks = c(10^seq(3, 5), 5e4)
) +
scale_colour_brewer(
palette = "Dark2",
name = "Age group"
) +
coord_cartesian(
expand = FALSE
) +
theme_bw() +
theme(
legend.position = "top"
) +
labs(
x = "Simulation time (days)",
linetype = "Compartment",
y = "Individuals"
)
plot_intervention_cases
# Chunk 15
# log the date that cases exceed 50000 daily
start_date <- min(
which(
new_infections(data_combined, by_group = FALSE)[, new_infections > 50000]
)
)
# create a new workplace closures object
workplace_closures_2 <- intervention(
type = "contacts",
time_begin = start_date,
time_end = start_date + 60,
reduction = matrix(c(0.01, 0.3, 0.01))
)
# Chunk 16
combined_interventions <- c(combined_interventions, workplace_closures_2)
# Chunk 17
# get data from an epidemic model with both interventions
data_combined <- model_default_cpp(
population = uk_population,
intervention = list(contacts = combined_interventions),
time_end = 600, increment = 1.0
)
# get data on new infections
data_infections <- new_infections(data_combined, by_group = TRUE)
# Chunk 18
plot_three_interventions <-
ggplot() +
geom_vline(
xintercept = c(
close_schools$time_begin,
close_schools$time_end
),
linetype = "dotted"
) +
geom_vline(
xintercept = c(
close_workplaces$time_begin,
close_workplaces$time_end,
workplace_closures_2$time_begin,
workplace_closures_2$time_end
),
colour = "red",
linetype = "dotted"
) +
annotate(
geom = "text",
x = mean(c(close_schools$time_begin, close_schools$time_end)),
y = 50000,
label = "Schools closed"
) +
annotate(
geom = "text",
x = c(
mean(
c(close_workplaces$time_begin, close_workplaces$time_end)
),
mean(c(workplace_closures_2$time_begin, workplace_closures_2$time_end))
),
y = 30000,
colour = "red",
label = c("Workplaces\nclosed", "Workplaces\nclosed")
) +
geom_line(
data = data_baseline_infections,
aes(time, new_infections, colour = demography_group),
linetype = "dashed"
) +
geom_line(
data = data_infections,
aes(time, new_infections, colour = demography_group),
linetype = "solid"
) +
scale_y_sqrt(
labels = scales::comma,
breaks = c(10^seq(3, 5), 5e4)
) +
scale_colour_brewer(
palette = "Dark2",
name = "Age group"
) +
coord_cartesian(
expand = FALSE
) +
theme_bw() +
theme(
legend.position = "top"
) +
labs(
x = "Simulation time (days)",
linetype = "Compartment",
y = "Individuals"
)
plot_three_interventions
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
message = FALSE,
warning = FALSE,
fig.width = 5,
fig.height = 4,
dpi = 300
)
# Chunk 2: setup
library(epidemics)
library(dplyr)
library(ggplot2)
# Chunk 3
# load contact and population data from socialmixr::polymod
polymod <- socialmixr::polymod
contact_data <- socialmixr::contact_matrix(
polymod,
countries = "United Kingdom",
age.limits = c(0, 20, 65),
symmetric = TRUE
)
# prepare contact matrix
contact_matrix <- t(contact_data$matrix)
# prepare the demography vector
demography_vector <- contact_data$demography$population
names(demography_vector) <- rownames(contact_matrix)
# Chunk 4
# initial conditions
initial_i <- 1e-4
initial_conditions <- c(
S = 1 - initial_i, E = 0, I = initial_i, R = 0, V = 0
)
# build for all age groups
initial_conditions <- rbind(
initial_conditions,
initial_conditions,
initial_conditions
)
# assign rownames for clarity
rownames(initial_conditions) <- rownames(contact_matrix)
# Chunk 5
uk_population <- population(
name = "UK",
contact_matrix = contact_matrix,
demography_vector = demography_vector,
initial_conditions = initial_conditions
)
# Chunk 6
# prepare an intervention that models mask mandates for ~3 months (100 days)
mask_mandate <- intervention(
name = "mask mandate",
type = "rate",
time_begin = 60,
time_end = 60 + 100,
reduction = 0.1
)
# examine the intervention object
mask_mandate
# check the object
is_intervention(mask_mandate)
is_contacts_intervention(mask_mandate)
is_rate_intervention(mask_mandate)
# Chunk 7
# no intervention baseline scenario
data <- model_default_cpp(
population = uk_population,
time_end = 200, increment = 1.0
)
# with a mask mandate
data_masks <- model_default_cpp(
population = uk_population,
intervention = list(transmissibility = mask_mandate),
time_end = 200, increment = 1.0
)
# Chunk 8
# get new infections in each scenario
data <- new_infections(data, by_group = TRUE)
data_masks <- new_infections(data_masks, by_group = TRUE)
# assign a scenario name to each scenario
data$scenario <- "baseline"
data_masks$scenario <- "masks"
# bind data together
data_combined <- bind_rows(data, data_masks)
# Chunk 9
ggplot(data_combined) +
geom_line(
aes(time, new_infections, col = demography_group, linetype = scenario)
) +
coord_cartesian(
expand = FALSE
) +
annotate(
geom = "rect",
xmin = get_parameter(mask_mandate, "time_begin"),
xmax = get_parameter(mask_mandate, "time_end"),
ymin = 0, ymax = 150e3,
fill = alpha("red", alpha = 0.2),
lty = "dashed"
) +
scale_y_continuous(
labels = scales::comma
) +
scale_linetype_manual(
name = "Scenario",
values = c(
baseline = "dashed",
masks = "solid"
)
) +
scale_colour_brewer(
palette = "Dark2",
name = "Age group"
) +
expand_limits(
y = c(0, 100e3)
) +
coord_cartesian(
expand = FALSE
) +
theme_bw() +
theme(
legend.position = "top"
) +
labs(
x = "Simulation time (days)",
linetype = "Compartment",
y = "New infections"
)
library(pander)
library(dplyr)
# Here we load the needed data and regroup it from 5 into two age groups.
library(fluEvidenceSynthesis)
install.package(fluEvidenceSynthesis)
install.packages("devtools")
library(devtools)
install_github("MJomaba/flu-evidence-synthesis", dependencies = TRUE)
library(pander)
library(dplyr)
# Here we load the needed data and regroup it from 5 into two age groups.
library(fluEvidenceSynthesis)
data("demography")
data("polymod_uk")
data("ili")
# Virologically confirmed infections
data("confirmed.samples")
# Group all the example data into two age groups:
polymod <- polymod_uk[,c(1,2)]
polymod[,3] <- rowSums(polymod_uk[,c(3,4,5,6,7,8)])
polymod[,4] <- polymod_uk[,9]
ili_df <- ili
ili_df$ili <- ili$ili[,c(1,2)]
ili_df$ili[,1] <- rowSums(ili$ili[,c(1,2,3,4)])
ili_df$ili[,2] <- ili$ili[,5]
ili_df$total.monitored <- ili$total.monitored[,c(1,2)]
ili_df$total.monitored[,1] <- rowSums(ili$total.monitored[,c(1,2,3,4)])
ili_df$total.monitored[,2] <- ili$total.monitored[,5]
confirmed.samples_df <- confirmed.samples
confirmed.samples_df$positive <- confirmed.samples$positive[,c(1,2)]
confirmed.samples_df$positive[,1] <- rowSums(confirmed.samples$positive[,c(1,2,3,4)])
confirmed.samples_df$positive[,2] <- confirmed.samples$positive[,5]
confirmed.samples_df$total.samples <- confirmed.samples$total.samples[,c(1,2)]
confirmed.samples_df$total.samples[,1] <- rowSums(confirmed.samples$total.samples[,c(1,2,3,4)])
confirmed.samples_df$total.samples[,2] <- confirmed.samples$total.samples[,5]
library(fluEvidenceSynthesis)
data(coverage)
# Coverage rates for the low risk <65 and low risk 65+
cov <- coverage[,c("Under.65","X65")]/100.0
vaccine_calendar <- as_vaccination_calendar(efficacy = c(0.7, 0.4),
dates = coverage$Date,
coverage = cov,
no_age_groups = 2, no_risk_groups = 1)
initial_parameters <- c(0.1, 0.1, 1e-5, 0.16, 0.5, 0.5, -0.15)
names(initial_parameters) <- c("epsilon_1", "epsilon_2", "psi", "transmissibility", "susceptibility_1", "susceptibility_2", "initial_infected")
inference.results <- inference(demography = demography,
vaccine_calendar = vaccine_calendar,
polymod_data = as.matrix(polymod),
ili = ili_df$ili,
mon_pop = ili_df$total.monitored,
n_pos = confirmed.samples_df$positive,
n_samples = confirmed.samples_df$total.samples,
initial = initial_parameters,
age_groups = c(65),
nbatch = 1000,
nburn = 1000, blen = 5 )
pander(head(inference.results$batch))
library(fluEvidenceSynthesis)
data("demography")
data("polymod_uk")
data("ili")
# Virologically confirmed infections
data("confirmed.samples")
# UK vaccine calendar
data("vaccine_calendar")
vaccine_calendar$calendar[,15:21] <- 0
age_map <- age_group_mapping(c(1,5,15,25,45,65), c(5,15,45,65))
risk_map <- risk_group_mapping(c("LowRisk", "HighRisk"), c("All"))
# The percentage of each age group in the high risk group
risk_ratios <- matrix(c(0.021, 0.055, 0.098, 0.087, 0.092, 0.183, 0.45), ncol = 7, byrow = T)
par_map <- parameter_mapping(
epsilon = c(1,1,2,2,3), # The first parameter in the initial.parameters is used for the first 2 age groups, etc.
psi = 4,
transmissibility = 5,
susceptibility = c(6,6,6,7,7,7,8),
initial_infected = c(9))
initial.parameters <- c(0.01188150, 0.01831852, 0.05434378,
1.049317e-05, 0.1657944,
0.3855279, 0.9269811, 0.5710709,
-0.1543508)
# Adding names for clarity, is not actually needed
names(initial.parameters) <- c("espilon_1", "epsilon_2", "epsilon_3", "psi",
"transmissibility", "susceptibility_1", "susceptibility_2", "suceptibility_3",
"initial_infected")
inference.results <- inference(demography = demography,
vaccine_calendar = vaccine_calendar,
polymod_data = as.matrix(polymod_uk),
ili = ili$ili,
mon_pop = ili$total.monitored,
n_pos = confirmed.samples$positive,
n_samples = confirmed.samples$total.samples,
initial = initial.parameters,
age_group_map = age_map,
risk_group_map = risk_map,
parameter_map = par_map,
risk_ratios = risk_ratios,
nbatch = 1000,
nburn = 1000, blen = 5 )
pander(head(inference.results$batch))
library(fluEvidenceSynthesis)
# The custom inference function. In this example the custom inference function
# performs exactly the same inference as the original C++ function (above).
# It is up to the user to change this in a way that works for their analysis.
custom_inference <- function(demography, vaccine_calendar, polymod_data, ili,
mon_pop, n_pos, n_samples, initial, mapping,
nbatch, nburn, blen) {
current.contact.ids <- seq(1,nrow(polymod_uk))
proposed.contact.ids <- current.contact.ids
# Seven age groups used in the model
age.group.limits <- c(1,5,15,25,45,65)
# Sum all populations with a certain age into their corresponding age group
age.group.sizes.5 <- stratify_by_age(demography, c(5,15,45,65))
if (missing(mapping))
mapping <- age_group_mapping(age.group.limits, c(5,15,45,65))
# Define the actual log likelihood function
llikelihood <- function( pars ) {
# Resample contact ids
proposed.contact.ids <<- current.contact.ids
if (runif(1,0,1) < 0.1) {
rs <- round(runif(2,1,length(proposed.contact.ids)))
proposed.contact.ids[rs[1]] <<- rs[2]
}
contacts <- contact_matrix(as.matrix(polymod_uk[proposed.contact.ids,]),
demography, age.group.limits )
age.groups <- stratify_by_age(demography,
age.group.limits )
# Fraction of each age group classified as high risk
# We can classify a third risk group, but we are not doing
# that here (the second row is 0 in our risk.ratios matrix)
risk.ratios <- matrix(c(
0.021, 0.055, 0.098, 0.087, 0.092, 0.183, 0.45,
0, 0, 0, 0, 0, 0, 0
), ncol = 7, byrow = T)
# Population sizes in each age and risk group
popv <- stratify_by_risk(
age.groups, risk.ratios );
# Population size initially infected by age and risk group
initial.infected <- rep( 10^pars[9], 7 )
initial.infected <- stratify_by_risk(
initial.infected, risk.ratios );
# Run simulation
# Note that to reduce complexity
# we are using the same susceptibility parameter for multiple age groups
odes <- infectionODEs( popv, initial.infected,
vaccine_calendar,
contacts,
c(pars[6], pars[6], pars[6],
pars[7], pars[7], pars[7], pars[8]),
transmissibility = pars[5],
c(0.8,1.8), 7 )
# Ignore times row
odes <- odes[,2:22]
# Convert the 7 age groups for each risk group to 5 groups
from <- as.numeric(mapping$from)
to <- as.numeric(mapping$to)
converted.odes <- matrix(0, nrow = nrow(odes), ncol = max(to))
for (i in 1:nrow(mapping)) {
# all three age groups
fv <- c(0,7,14) + from[i]
converted.odes[,to[i]] <- converted.odes[,to[i]] + mapping$weight[i]*rowSums(odes[,fv])
}
# For each week and each group sum log likelihood
epsilons <- c(pars[1], pars[1], pars[2], pars[2], pars[3])
ll <- log_likelihood_cases(
epsilons,pars[4], as.matrix(converted.odes),
age.group.sizes.5, ili, mon_pop,
n_pos, n_samples)
return(ll)
}
llprior <- function(pars) {
if (any(pars[1:8] < 0) || any(pars[1:4] > 1) || any(pars[6:8] > 1)
|| pars[9] < log(0.00001) || pars[9] > log(10) )
return(-Inf)
lprob <- dnorm(pars[5], 0.1653183, 0.02773053, 1)
lprob <- lprob + dlnorm(pars[1], -4.493789, 0.2860455, 1)
lprob <- lprob + dlnorm(pars[2], -4.117028, 0.4751615, 1)
lprob <- lprob + dlnorm(pars[3], -2.977965, 1.331832, 1)
return(lprob)
}
# Store the contact ids used during inference
contact.ids <- list()
# Run adaptive.mcmc
mcmc.result <- adaptive.mcmc(lprior = llprior, llikelihood = llikelihood,
outfun = function() {
contact.ids[[length(contact.ids)+1]] <<-  current.contact.ids
},
acceptfun = function() {
current.contact.ids <<- proposed.contact.ids
},
nburn = nburn,
initial = initial,
nbatch = nbatch, blen = blen)
mcmc.result$contact.ids <- t(data.frame(contact.ids))
mcmc.result
}
library(reshape2)
library(ggplot2)
colnames(inference.results$batch) <- c("eps1", "eps2", "eps3", "psi", "q",
"susc1", "susc2", "susc3", "I0")
ggplot(data=melt(inference.results$batch)) + facet_wrap( ~ Var2, ncol=3, scales="free" ) + geom_histogram(aes(x=value), bins=25)
library(fluEvidenceSynthesis)
library(ggplot2)
# Function that runs the model given a set of parameters. Most of the function
# has todo with loading the correct inputs for the ODE model
ode.results <- function( pars )
{
data("demography")
age.group.limits <- c(1,5,15,25,45,65)
contacts <- contact_matrix(as.matrix(polymod_uk),
demography, age.group.limits )
age.groups <- stratify_by_age(demography, age.group.limits)
# Fraction of each age group classified as high risk
# We can classify a third risk group, but we are not doing
# that here (the second row is 0 in our risk.ratios matrix)
risk.ratios <- matrix( c(
0.021, 0.055, 0.098, 0.087, 0.092, 0.183, 0.45,
0, 0, 0, 0, 0, 0, 0
), ncol=7, byrow=T )
# Population sizes in each age and risk group
popv <- stratify_by_risk(
age.groups, risk.ratios )
# Population size initially infected by age and risk group
initial.infected <- rep( 10^pars[9], 7 )
initial.infected <- stratify_by_risk(
initial.infected, risk.ratios )
# Run simulation
# Note that to reduce complexity
# by using the same susceptibility parameter for multiple age groups
odes <- infectionODEs( popv, initial.infected,
vaccine_calendar,
contacts,
c(pars[6],pars[6],pars[6],
pars[7],pars[7],pars[7],pars[8]),
transmissibility=pars[5],
c(0.8,1.8), 7 )
# For simplicity we sum the low and high risk group
simplify.odes <- odes[,2:8]+odes[,9:15]+odes[,16:22]
rownames(simplify.odes) <- odes[,1]
return( simplify.odes )
}
# Calculate the credibility intervals for each time point. By default the function
# calculate it for the (equal tailed) credibility interval of 0% (median), 50% and 98%
cim <- credible.interval.model(ode.results, inference.results$batch, intervals=c(0,0.5, 0.98))
